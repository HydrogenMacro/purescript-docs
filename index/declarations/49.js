// This file was generated by docs-search.
window.DocsSearchIndex["49"] = [["fail",[{"comments":"The Fail type class is part of the custom type errors feature. To provide\na custom type error when someone tries to use a particular instance,\nwrite that instance out with a Fail constraint.\n\nFor more information, see\n[the Custom Type Errors guide](https://github.com/purescript/documentation/blob/master/guides/Custom-Type-Errors.md).\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"kind":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim","TypeError"],"Doc"]},"name":"message"}],"fundeps":[],"superclasses":[]}},"moduleName":"Prim.TypeError","name":"Fail","packageInfo":{"tag":"builtin"},"score":0},{"comments":"Throws a failure error in `ExceptT (NonEmptyList ForeignError) m`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"m","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign"],"ForeignError"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","Except","Trans"],"ExceptT"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign"],"ForeignError"]}]}}]},{"tag":"TypeVar","annotation":null,"contents":"m"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Foreign","name":"fail","packageInfo":{"tag":"package","value":"foreign"},"score":8,"sourceSpan":{"end":{"column":87,"line":185},"name":".spago\\p\\foreign-7.0.0\\src\\Foreign.purs","start":{"column":1,"line":185}}}]],["failed",[{"hashAnchor":"v","info":{"tag":"dataConstructor","value":{"dataDeclType":"data","type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"e"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","Fork","Class"],"BracketCondition"]},{"tag":"TypeVar","annotation":null,"contents":"e"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}}},"moduleName":"Control.Monad.Fork.Class","name":"Failed","packageInfo":{"tag":"package","value":"fork"},"score":1,"sourceSpan":{"end":{"column":11,"line":64},"name":".spago\\p\\fork-6.0.0\\src\\Control\\Monad\\Fork\\Class.purs","start":{"column":3,"line":64}}}]],["failover",[{"comments":"Tries to map over a `Traversal`; returns `empty` if the traversal did\nnot have any new focus.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"f","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"f"}],"constraintClass":[["Control","Alternative"],"Alternative"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"Optic"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}}]}}]}}]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"f"},{"tag":"TypeVar","annotation":null,"contents":"t"}]}]}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Lens.Traversal","name":"failover","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":9,"line":97},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\Traversal.purs","start":{"column":1,"line":91}}}]],["false",[{"comments":"The 'False' boolean type.\n","hashAnchor":"t","info":{"tag":"externData","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}},"moduleName":"Prim.Boolean","name":"False","packageInfo":{"tag":"builtin"},"score":0}]],["fanin",[{"comments":"Compose a value which eliminates a sum from two values, each eliminating\none side of the sum.\n\nThis combinator is useful when assembling values from smaller components,\nbecause it provides a way to support two different types of input.\n\nSpecializing `(|||)` to function application would look like this:\n```\n(|||) :: forall a b c d. (a -> c) -> (b -> c) -> Either a b -> c\n```\nWe take two functions, `f` and `g`, which both return the same type `c` and we transform them into a\nsingle function which takes an `Either` value with the parameter type of `f` on the left side and\nthe parameter type of `g` on the right side. The function then runs either `f` or `g`, depending on\nwhether the `Either` value is a `Left` or a `Right`.\nThis allows us to bundle two different computations which both have the same result type into one\nfunction which will run the approriate computation based on the parameter supplied in the `Either` value.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"p","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"c","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Data","Profunctor","Choice"],"Choice"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]}]}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Profunctor.Choice","name":"fanin","packageInfo":{"tag":"package","value":"profunctor"},"score":4,"sourceSpan":{"end":{"column":22,"line":80},"name":".spago\\p\\profunctor-6.0.1\\src\\Data\\Profunctor\\Choice.purs","start":{"column":1,"line":74}}}]],["fanout",[{"comments":"Compose a value which introduces a `Tuple` from two values, each introducing\none side of the `Tuple`.\n\nThis combinator is useful when assembling values from smaller components,\nbecause it provides a way to support two different types of output.\n\nSpecializing `(&&&)` to function application would look like this:\n```\n(&&&) :: forall a b c. (a -> b) -> (a -> c) -> (a -> (Tuple b c))\n```\nWe take two functions, `f` and `g`, with the same parameter type and we transform them into a\nsingle function which takes one parameter and returns a `Tuple` of the results of running\n`f` and `g` on the parameter, respectively.  This allows us to run two parallel computations\non the same input and return both results in a `Tuple`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"p","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"c","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Data","Profunctor","Strong"],"Strong"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"p"},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]}}]}]}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Profunctor.Strong","name":"fanout","packageInfo":{"tag":"package","value":"profunctor"},"score":4,"sourceSpan":{"end":{"column":21,"line":77},"name":".spago\\p\\profunctor-6.0.1\\src\\Data\\Profunctor\\Strong.purs","start":{"column":1,"line":71}}}]],["cdatasectionnode",[{"hashAnchor":"v","info":{"tag":"dataConstructor","value":{"dataDeclType":"data","type":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","DOM","NodeType"],"NodeType"]}}},"moduleName":"Web.DOM.NodeType","name":"CDATASectionNode","packageInfo":{"tag":"package","value":"web-dom"},"score":3,"sourceSpan":{"end":{"column":21,"line":11},"name":".spago\\p\\web-dom-6.0.0\\src\\Web\\DOM\\NodeType.purs","start":{"column":3,"line":11}}}]],["c2",[{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"a"},{"name":"z"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"z"}]}}},"moduleName":"Data.Functor.Coproduct.Nested","name":"C2","packageInfo":{"tag":"package","value":"functors"},"score":4,"sourceSpan":{"end":{"column":28,"line":32},"name":".spago\\p\\functors-5.0.0\\src\\Data\\Functor\\Coproduct\\Nested.purs","start":{"column":1,"line":32}}}]],["beforeinput",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.UIEvent.InputEvent.EventTypes","name":"beforeinput","packageInfo":{"tag":"package","value":"web-uievents"},"score":3,"sourceSpan":{"end":{"column":25,"line":5},"name":".spago\\p\\web-uievents-5.0.0\\src\\Web\\UIEvent\\InputEvent\\EventTypes.purs","start":{"column":1,"line":5}}}]],["beforeprint",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.HTML.Event.EventTypes","name":"beforeprint","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":25,"line":14},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\EventTypes.purs","start":{"column":1,"line":14}}}]],["beforescriptexecute",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.HTML.Event.EventTypes","name":"beforescriptexecute","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":33,"line":17},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\EventTypes.purs","start":{"column":1,"line":17}}}]],["beforeunload",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.HTML.Event.BeforeUnloadEvent.EventTypes","name":"beforeunload","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":26,"line":5},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\BeforeUnloadEvent\\EventTypes.purs","start":{"column":1,"line":5}}}]],["beforeunloadevent",[{"hashAnchor":"t","info":{"tag":"data","value":{"dataDeclType":"data","typeArguments":[]}},"moduleName":"Web.HTML.Event.BeforeUnloadEvent","name":"BeforeUnloadEvent","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":46,"line":11},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\BeforeUnloadEvent.purs","start":{"column":1,"line":11}}}]],["below",[{"comments":"`lift` a `Prism` through a `Traversable` functor, giving a `Prism` that matches \nonly if all the elements of the container match the `Prism`.\n\n``` purescript\n>>> [Left 1, Right \"foo\", Left 4, Right \"woot\"]^..below _Right\n[]\n```\n\n``` purescript\n>>> [Right \"hail hydra!\", Right \"foo\", Right \"blah\", Right \"woot\"]^..below _Right\n[[\"hail hydra!\",\"foo\",\"blah\",\"woot\"]]\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"f","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"f"}],"constraintClass":[["Data","Traversable"],"Traversable"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"APrism'"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"Prism'"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"f"},{"tag":"TypeVar","annotation":null,"contents":"s"}]}}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"f"},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Lens.Prism","name":"below","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":74,"line":195},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\Prism.purs","start":{"column":1,"line":195}}}]],["beside",[{"comments":"The Beside type constructor combines two Docs horizontally\nto be used in a custom type error.\n\nFor more information, see\n[the Custom Type Errors guide](https://github.com/purescript/documentation/blob/master/guides/Custom-Type-Errors.md).\n","hashAnchor":"t","info":{"tag":"externData","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim","TypeError"],"Doc"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim","TypeError"],"Doc"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim","TypeError"],"Doc"]}]}]}},"moduleName":"Prim.TypeError","name":"Beside","packageInfo":{"tag":"builtin"},"score":0}]],["between",[{"comments":"Test whether a value is between a minimum and a maximum (inclusive).\nFor example:\n\n``` purescript\nlet f = between 0 10\nf 0    == true\nf (-5) == false\nf 5    == true\nf 10   == true\nf 15   == false\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}]}]},"skolem":null}}},"moduleName":"Data.Ord","name":"between","packageInfo":{"tag":"package","value":"prelude"},"score":55,"sourceSpan":{"end":{"column":53,"line":208},"name":".spago\\p\\prelude-6.0.2\\src\\Data\\Ord.purs","start":{"column":1,"line":208}}}]],["aff",[{"comments":"An `Aff a` is an asynchronous computation with effects. The\ncomputation may either error with an exception, or produce a result of\ntype `a`. `Aff` effects are assembled from primitive `Effect` effects using\n`makeAff` or `liftEffect`.\n","hashAnchor":"t","info":{"tag":"data","value":{"dataDeclType":"data","typeArguments":[{"name":"t0"}]}},"moduleName":"Effect.Aff","name":"Aff","packageInfo":{"tag":"package","value":"aff"},"score":5,"sourceSpan":{"end":{"column":40,"line":66},"name":".spago\\p\\aff-8.0.0\\src\\Effect\\Aff.purs","start":{"column":1,"line":66}}}]],["affinetraversal",[{"comments":"An affine traversal (has at most one focus, but is not a prism).\n","hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"s"},{"name":"t"},{"name":"a"},{"name":"b"}],"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"p","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Data","Profunctor","Strong"],"Strong"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"p"}],"constraintClass":[["Data","Profunctor","Choice"],"Choice"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"Optic"]},{"tag":"TypeVar","annotation":null,"contents":"p"}]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]}]},"skolem":null}}}},"moduleName":"Data.Lens.Types","name":"AffineTraversal","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":81,"line":139},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\Types.purs","start":{"column":1,"line":139}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"AffineTraversal"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Lens.AffineTraversal","name":"affineTraversal","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":29,"line":27},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\AffineTraversal.purs","start":{"column":1,"line":23}}}]],["affinetraversal'",[{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"s"},{"name":"a"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"AffineTraversal"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}},"moduleName":"Data.Lens.Types","name":"AffineTraversal'","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":52,"line":140},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\Types.purs","start":{"column":1,"line":140}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]}}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Lens","Types"],"AffineTraversal"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Data.Lens.AffineTraversal","name":"affineTraversal'","packageInfo":{"tag":"package","value":"profunctor-lenses"},"score":1,"sourceSpan":{"end":{"column":29,"line":34},"name":".spago\\p\\profunctor-lenses-8.0.0\\src\\Data\\Lens\\AffineTraversal.purs","start":{"column":1,"line":31}}}]],["afterprint",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.HTML.Event.EventTypes","name":"afterprint","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":24,"line":8},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\EventTypes.purs","start":{"column":1,"line":8}}}]],["afterscriptexecute",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Web","Event","Event"],"EventType"]}},"moduleName":"Web.HTML.Event.EventTypes","name":"afterscriptexecute","packageInfo":{"tag":"package","value":"web-html"},"score":3,"sourceSpan":{"end":{"column":32,"line":11},"name":".spago\\p\\web-html-4.1.0\\src\\Web\\HTML\\Event\\EventTypes.purs","start":{"column":1,"line":11}}}]]]